{{#models}}
{{#model}}
# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct {{classname}} <: SwaggerModel
{{#allVars}}
    {{name}}::Union{ Nothing, {{datatype}} } # {{baseName}}
{{/allVars}}

    function {{classname}}(;{{#allVars}}{{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nothing{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allVars}})
        o = new()
        {{#allVars}}
        set_field!(o, :{{name}}, {{name}})
        {{/allVars}}
        o
    end
end # type {{classname}}

const _name_map_{{classname}} = Dict{String,Symbol}([{{#allVars}}"{{baseName}}"=>:{{name}}{{#hasMore}}, {{/hasMore}}{{/allVars}}])
const _field_map_{{classname}} = Dict{Symbol,String}([{{#allVars}}:{{name}}=>"{{baseName}}"{{#hasMore}}, {{/hasMore}}{{/allVars}}])
Swagger.name_map(::Type{ {{classname}} }) = _name_map_{{classname}}
Swagger.field_map(::Type{ {{classname}} }) = _field_map_{{classname}}
{{#allVars}}
{{#isEnum}}

const _allowed_{{classname}}_{{name}} = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{/isEnum}}
{{/allVars}}

function check_required(o::{{classname}})
{{#allVars}}
{{^isEnum}}
{{#required}}
    (o.{{name}} === nothing) && (return false)
{{/required}}
{{/isEnum}}
{{/allVars}}
    true
end

function validate_field(o::{{classname}}, name::Symbol, val)
{{#allVars}}
{{#isEnum}}
    if name === :{{name}}
        Swagger.validate_param(name, "{{classname}}", :enum, val, _allowed_{{classname}}_{{name}})
    end
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
    if name === :{{name}}
{{#maxLength}}
        Swagger.validate_param(name, "{{classname}}", :maxLength, val, {{maxLength}})
{{/maxLength}}
{{#minLength}}
        Swagger.validate_param(name, "{{classname}}", :minLength, val, {{minLength}})
{{/minLength}}
{{#maximum}}
        Swagger.validate_param(name, "{{classname}}", :maximum, val, {{maximum}}, {{#exclusiveMaximum}}true{{/exclusiveMaximum}}{{^exclusiveMaximum}}false{{/exclusiveMaximum}})
{{/maximum}}
{{#minimum}}
        Swagger.validate_param(name, "{{classname}}", :minimum, val, {{minimum}}, {{#exclusiveMinimum}}true{{/exclusiveMinimum}}{{^exclusiveMinimum}}false{{/exclusiveMinimum}})
{{/minimum}}
{{#maxItems}}
        Swagger.validate_param(name, "{{classname}}", :maxItems, val, {{maxItems}})
{{/maxItems}}
{{#minItems}}
        Swagger.validate_param(name, "{{classname}}", :minItems, val, {{minItems}})
{{/minItems}}
    end
{{/hasValidation}}
{{/isEnum}}
{{/allVars}}
end{{/model}}{{/models}}
