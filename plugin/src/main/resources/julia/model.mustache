{{#models}}
{{#model}}
# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type {{classname}}
{{#vars}}
    {{name}}::Nullable{ {{datatype}} } # {{baseName}}
{{/vars}}

    function {{classname}}(;{{#vars}}{{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nothing{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/vars}})
        o = new()
        {{#vars}}
        o.{{name}} = {{name}}
        {{/vars}}
        o
    end
end # type {{classname}}

const _name_map_{{classname}} = Dict{String,Symbol}([{{#vars}}"{{baseName}}"=>:{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}])
Swagger.name_map(::Type{ {{classname}} }) = _name_map_{{classname}}
{{#vars}}
{{#isEnum}}

const _allowed_{{classname}}_{{name}} = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{/isEnum}}
{{/vars}}

function check_required(o::{{classname}})
{{#vars}}
{{^isEnum}}
{{#required}}
    isnull(o.{{name}}) && (return false)
{{/required}}
{{/isEnum}}
{{/vars}}
    true
end

get_field(o::{{classname}}, name::String) = get_field(o, Swagger.name_map(o)[name])
get_field(o::{{classname}}, name::Symbol) = get(getfield(o, name))

isset_field(o::{{classname}}, name::String) = isset_field(o, Swagger.name_map(o)[name])
isset_field(o::{{classname}}, name::Symbol) = !isnull(getfield(o, name))

set_field(o::{{classname}}, name::String, val) = set_field(o, Swagger.name_map(o)[name], val)

function set_field(o::{{classname}}, name::Symbol, val)
{{#vars}}
{{#isEnum}}
    if name === :{{name}}
{{#isContainer}}
{{#isListContainer}}
        map((k) -> (k in _allowed_{{classname}}_{{name}}) || error("Invalid value $k for $name"), val)
{{/isListContainer}}
{{#isMapContainer}}
        map((k) -> (k in _allowed_{{classname}}_{{name}}) || error("Invalid key $k in $name"), keys(val))
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        (val in _allowed_{{classname}}_{{name}}) || error("Invalid value $val for $name")
{{/isContainer}}
    end
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
    if name === :{{name}}
{{#maxLength}}
        (val !== nothing) && (length(val) > {{maxLength}}) && error("Length of $name must be less than or equal to {{maxLength}}")
{{/maxLength}}
{{#minLength}}
        (val !== nothing) && (length(val) < {{maxLength}}) && error("Length of $name must be greater than or equal to {{minLength}}")
{{/minLength}}
{{#maximum}}
        (val !== nothing) && (val >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) && error("$name must be less than {{^exclusiveMaximum}}or equal to{{/exclusiveMaximum}}{{maximum}}")
{{/maximum}}
{{#minimum}}
        (val !== nothing) && (val <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) && error("$name must be greater than {{^exclusiveMaximum}}or equal to{{/exclusiveMaximum}}{{minimum}}")
{{/minimum}}
{{#maxItems}}
        (val !== nothing) && (length(val) > {{maxItems}}) && error("Number of items in $name must be less than or equal to {{maxItems}}")
{{/maxItems}}
{{#minItems}}
        (val !== nothing) && (length(val) < {{minItems}}) && error("Number of items in $name must be greater than or equal to {{minItems}}")
{{/minItems}}
    end
{{/hasValidation}}
{{/isEnum}}
{{/vars}}
    setfield(o, name, Nullable{val})
    nothing
end

function Swagger.from_json(o::{{classname}}, json::Dict{String,Any})
    for name in ({{#vars}}"{{baseName}}"{{#hasMore}}, {{/hasMore}}{{/vars}})
        (name in keys(json)) && Swagger.from_json(o, Swagger.name_map(o)[name], json[name])
    end
    nothing
end
{{/model}}{{/models}}
