{{>partial_header}}
{{#models}}
{{#model}}
{{#isAlias}}
if !isdefined(@__MODULE__, :{{classname}})
    const {{classname}} = {{dataType}}
else
    @warn("Skipping redefinition of {{classname}} to {{dataType}}")
end
{{/isAlias}}{{^isAlias}}
mutable struct {{classname}} <: SwaggerModel
{{#allVars}}
    {{name}}::Any # spec type: Union{ Nothing, {{datatype}} } # spec name: {{baseName}}
{{/allVars}}

    function {{classname}}(;{{#allVars}}{{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nothing{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allVars}})
        o = new()
        {{#allVars}}
        validate_property({{classname}}, Symbol("{{baseName}}"), {{name}})
        setfield!(o, Symbol("{{name}}"), {{name}})
        {{/allVars}}
        o
    end
end # type {{classname}}

const _property_map_{{classname}} = Dict{Symbol,Symbol}({{#allVars}}Symbol("{{baseName}}")=>Symbol("{{name}}"){{#hasMore}}, {{/hasMore}}{{/allVars}})
const _property_types_{{classname}} = Dict{Symbol,String}({{#allVars}}Symbol("{{baseName}}")=>"{{datatype}}"{{#hasMore}}, {{/hasMore}}{{/allVars}})
Base.propertynames(::Type{ {{classname}} }) = collect(keys(_property_map_{{classname}}))
Swagger.property_type(::Type{ {{classname}} }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_{{classname}}[name]))}
Swagger.field_name(::Type{ {{classname}} }, property_name::Symbol) =  _property_map_{{classname}}[property_name]
{{#allVars}}
{{#isEnum}}

const _allowed_{{classname}}_{{baseName}} = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{/isEnum}}
{{/allVars}}

function check_required(o::{{classname}})
{{#allVars}}
{{^isEnum}}
{{#required}}
    (getproperty(o, Symbol("{{baseName}}")) === nothing) && (return false)
{{/required}}
{{/isEnum}}
{{/allVars}}
    true
end

function validate_property(::Type{ {{classname}} }, name::Symbol, val)
{{#allVars}}
{{#isEnum}}
    if name === Symbol("{{baseName}}")
        Swagger.validate_param(name, "{{classname}}", :enum, val, _allowed_{{classname}}_{{baseName}})
    end
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
    if name === Symbol("{{baseName}}")
{{#maxLength}}
        Swagger.validate_param(name, "{{classname}}", :maxLength, val, {{maxLength}})
{{/maxLength}}
{{#minLength}}
        Swagger.validate_param(name, "{{classname}}", :minLength, val, {{minLength}})
{{/minLength}}
{{#maximum}}
        Swagger.validate_param(name, "{{classname}}", :maximum, val, {{maximum}}, {{#exclusiveMaximum}}true{{/exclusiveMaximum}}{{^exclusiveMaximum}}false{{/exclusiveMaximum}})
{{/maximum}}
{{#minimum}}
        Swagger.validate_param(name, "{{classname}}", :minimum, val, {{minimum}}, {{#exclusiveMinimum}}true{{/exclusiveMinimum}}{{^exclusiveMinimum}}false{{/exclusiveMinimum}})
{{/minimum}}
{{#maxItems}}
        Swagger.validate_param(name, "{{classname}}", :maxItems, val, {{maxItems}})
{{/maxItems}}
{{#minItems}}
        Swagger.validate_param(name, "{{classname}}", :minItems, val, {{minItems}})
{{/minItems}}
    end
{{/hasValidation}}
{{/isEnum}}
{{/allVars}}
end{{/isAlias}}{{/model}}{{/models}}
